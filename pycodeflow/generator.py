""" Module containing diagram generation implementation """
import os
from distutils.util import strtobool


class Generator:
    """ Class responsible for generating diagrams for Pycodeflow"""

    def __init__(self, scenario=None, output_dir=None, enabled=None, code_only=False):
        """ Create a new Pycodeflow Generator

        Args:
            scenario (str): Name of the scenario/diagram context to represent current
                code execution. Defaults to the value of the ``PYCODEFLOW_SCENARIO``
                environment variable if set, otherwise ``"Code Flow"``. This parameter
                also determines the name of the output files generated by Pycodeflow.
            output_dir (str): Path to the directory in which to generate output files.
                Defaults to the value of ``PYCODEFLOW_OUTPUT_DIR`` environment variable
                if set, otherwise the ``diagrams/`` directory within the current working
                directory.
            enabled (bool): Whether or not to run Pycodeflow diagram generation.
                Defaults to value of ``PYCODEFLOW_ENABLED`` environment variable if set,
                otherwise ``False``.
            code_only (bool): Whether or not to output only the PlantUML diagram code,
                not the diagram itself. Defaults to ``False``.
        """

        self.enabled = self._is_enabled(enabled)
        if self.enabled:
            self.scenario = self._scenario(scenario)
            self.output_dir, self.output_file = self._paths(self.scenario, output_dir)
            self.code_only = code_only

    @staticmethod
    def _scenario(scenario):
        """ Return the scenario based on constructor arg and environment """

        if scenario is None:
            scenario = os.environ.get("PYCODEFLOW_SCENARIO", "Code Flow")
        return scenario

    @staticmethod
    def _is_enabled(enabled_status):
        """ Return whether or not Pycodeflow is enabled """

        if enabled_status is None:
            enabled_status = strtobool(os.environ.get("PYCODEFLOW_ENABLED", "False"))
        return bool(enabled_status)

    @staticmethod
    def _paths(scenario, output_dir):
        """ Return abspath to output dir and tuple containing output paths """

        filename = (
            "".join(c if c.isalnum() else "_" for c in scenario.lower()) + ".puml"
        )

        if output_dir is None:
            output_dir = os.environ.get(
                "PYCODEFLOW_OUTPUT_DIR", os.path.join(os.getcwd(), "diagrams")
            )

        output_dir_path = os.path.abspath(output_dir)
        output_file_path = os.path.join(output_dir_path, filename)

        return (output_dir_path, output_file_path)
